{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Template to installs MongoDB on ubuntu 20.04 server",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "Enter_KeyPair_Name_Ppk"
    },
    "InstanceType": {
      "Description": " EC2 instance type",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [
        "t1.micro",
        "t2.nano",
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m1.small",
        "m1.medium",
        "m1.large",
        "m1.xlarge",
        "m2.xlarge",
        "m2.2xlarge",
        "m2.4xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "c1.medium",
        "c1.xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "g2.2xlarge",
        "g2.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge",
        "hi1.4xlarge",
        "hs1.8xlarge",
        "cr1.8xlarge",
        "cc2.8xlarge",
        "cg1.4xlarge"
      ],
      "ConstraintDescription": "Must be a valid Amazon EC2 instance type."
    },
    "AccessKey": {
      "Description": "Provide access key with required permissions",
      "Type": "String",
      "Default": ""
    },
    "SecretAccessKey": {
      "Description": "Provide secret access key with required permissions",
      "Type": "String",
      "Default": ""
    },
    "VpcId": {
      "Description": "The VPC of the MongoDB Server",
      "Type": "AWS::EC2::VPC::Id",
      "Default": ""
    },
    "MongoSubnetId": {
      "Description": "The subnet of the MongoDB Server",
      "Type": "AWS::EC2::Subnet::Id",
      "Default": ""
    },
    "VolumeSize": {
      "Description": "Volume size for the root volume (default 100)",
      "Type": "Number",
      "Default": "100"
    },
    "pDefaultSg": {
      "Description": "Default VPC Security Groups",
      "Type": "CommaDelimitedList",
      "Default": "enter-default-security-group-ID"
    }
  },
  "Mappings": {
    "RegionMap": {
      "us-east-1": {
        "name": "ami-06992628e0a8e044c"
      },
      "us-east-1b": {
        "name": "ami-06992628e0a8e044c"
      },
      "us-east-1c": {
        "name": "ami-06992628e0a8e044c"
      }
    }
  },
  "Resources": {
    "MongoSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "MongoDB security group",
        "VpcId": {
          "Ref": "VpcId"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": "Enter-SSH-IP/32"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "27017",
            "ToPort": "27017",
            "CidrIp": "Enter-Access-IP/Range"
          }
        ]
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "9d8d80bb-cf44-498e-b420-43f6d0eece13"
        }
      }
    },
    "MongoDbServer": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "Comment1": "This creates an ec2 instance and installs a MongoDB server",
          "configSets": {
            "Install": [
              "Install-MongoDB"
            ]
          },
          "Install-MongoDB": {
            "packages": {
              "apt": {
                "awscli": [],
                "jq": []
              }
            },
            "files": {
              "/tmp/config-mongodb.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "echo \"1. Set APT \"\n",
                      "apt-get update -y \n",
                      "sudo apt-get install gnupg -y \n",
                      "wget -qO - https://www.mongodb.org/static/pgp/server-5.0.asc | sudo apt-key add - \n",
                      "apt-get update -y \n"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              },
              "/etc/apt/sources.list.d/mongodb.list": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu focal/mongodb-org/5.0 multiverse  \n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/etc/mongodb.conf": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "net:\n",
                      "  bindIp: localhost,0.0.0.0\n",
                      "  port: 27017\n",
                      "systemLog:\n",
                      "  destination: file\n",
                      "  path: /var/log/mongodb/mongod.log\n",
                      "  logAppend: true\n\n",
                      "storage:\n",
                      "  dbPath: /var/lib/mongodb\n",
                      "  journal:\n",
                      "    enabled: true\n",
                      "processManagement:\n",
                      "  timeZoneInfo: /usr/share/zoneinfo\n\n",
                      "replication:\n",
                      "  replSetName: ",
                      "\n\n"
                    ]
                  ]
                },
                "mode": "000644",
                "owner": "root",
                "group": "root"
              },
              "/tmp/install-mongodb.sh": {
                "content": {
                  "Fn::Join": [
                    "",
                    [
                      "#!/bin/bash\n\n",
                      "echo \"1. Install  monogo DB  \"\n",
                      "apt-get update -y \n",
                      "apt-get install -y mongodb-org \n",
                      "echo \"2. Rename Existing monogo DB file \"\n",
                      "CONF=/etc/mongod.conf \n",
                      "REGION=",
                      {
                        "Ref": "AWS::Region"
                      },
                      "\n",
                      "ACCESSKEY=",
                      {
                        "Ref": "AccessKey"
                      },
                      "\n",
                      "SECRETACCESSKEY=",
                      {
                        "Ref": "SecretAccessKey"
                      },
                      "\n",
                      "mv -v $CONF /etc/mongod.conf.bak \n\n",
                      "echo \"3. Rename our custom monogo DB file and Update Private IPAddress on mongod conf  \"\n",
                      "mv -v /etc/mongodb.conf /etc/mongod.conf \n\n",
                      "aws configure set aws_access_key_id $ACCESSKEY \n",
                      "aws configure set aws_secret_access_key $SECRETACCESSKEY \n",
                      "aws configure set default.region $REGION \n",
                      "PRIVATEIP1=$(aws ec2 describe-instances --filter Name=tag-key,Values=StackID Name=tag-value,Values=",
                      {
                        "Ref": "AWS::StackId"
                      },
                      " --output=text --region=$REGION | grep PRIVATEIPADDRESSES | awk '{print $4}'| head -n 1) \n",
                      "echo $PRIVATEIP1 \n",
                      "sed -i \"s/0.0.0.0/$PRIVATEIP1/g\" $CONF  \n",
                      "echo \"4. Start the  monogo DB Services \"\n",
                      "systemctl start mongod.service \n",
                      "echo $PRIVATEIP1 \n",
                      "\n\n"
                    ]
                  ]
                },
                "mode": "000755",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_AptaddrepoMongo": {
                "command": "/tmp/config-mongodb.sh >> /tmp/install-mongodb.log 2>&1\n"
              },
              "02_InstallMongoDBServerAndClient": {
                "command": " /tmp/install-mongodb.sh >> /tmp/install-mongodb.log 2>&1\n"
              }
            }
          }
        },
        "AWS::CloudFormation::Designer": {
          "id": "f422349f-8416-4a3b-b47e-e45f1e8f42ed"
        }
      },
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "name"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroupIds": [
          {
            "Fn::Select": [
              "0",
              {
                "Ref": "pDefaultSg"
              }
            ]
          },
          {
            "Fn::GetAtt": [
              "MongoSecurityGroup",
              "GroupId"
            ]
          },
          {
            "Ref": "MongoSecurityGroup"
          }
        ],
        "KeyName": {
          "Ref": "KeyName"
        },
        "SubnetId": {
          "Ref": "MongoSubnetId"
        },
        "Tags": [
          {
            "Key": "Stack",
            "Value": "Production"
          },
          {
            "Key": "env",
            "Value": "dev"
          },
          {
            "Key": "StackID",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "os",
            "Value": "ubuntu-20.04"
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "mongodb-node"
                ]
              ]
            }
          }
        ],
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "VolumeSize": {
                "Ref": "VolumeSize"
              }
            }
          }
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "apt-get update\n",
                "apt-get -y install python-setuptools\n",
                "mkdir aws-cfn-bootstrap-latest\n",
                "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
                "/usr/bin/python2.7 /usr/lib/python2.7/dist-packages/easy_install.py aws-cfn-bootstrap-latest\n",
                "## Error reporting helper function\n",
                "function error_exit\n",
                "{\n",
                "   /usr/local/bin/cfn-signal --exit-code 1 --reason \"$1\" '",
                {
                  "Ref": "WaitHandleServer"
                },
                "'\n",
                "   exit 1\n",
                "}\n",
                "## Initialize CloudFormati\n",
                "/usr/local/bin/cfn-init -v ",
                "         --stack ",
                {
                  "Ref": "AWS::StackName"
                },
                "         --resource MongoDbServer ",
                "         --configsets Install ",
                "         --access-key ",
                {
                  "Ref": "AccessKey"
                },
                "         --secret-key ",
                {
                  "Ref": "SecretAccessKey"
                },
                "         --region ",
                {
                  "Ref": "AWS::Region"
                },
                "     > /tmp/cfn-init.log 2>&1 || error_exit $(</tmp/cfn-init.log)\n",
                "## CloudFormation signal that setup is complete\n",
                "/usr/local/bin/cfn-signal --exit-code 0 --reason \"MongoDB Config Server instance setup complete\" '",
                {
                  "Ref": "WaitHandleServer"
                },
                "'\n"
              ]
            ]
          }
        }
      }
    },
    "DnsRecord": {
      "Type": "AWS::Route53::RecordSetGroup",
      "Properties": {
        "HostedZoneName": "example.com.",
        "Comment": "DNS name for my instance.",
        "RecordSets": [
          {
            "Name": "mongodb-env.example.com.",
            "Type": "A",
            "TTL": "900",
            "ResourceRecords": [
              {
                "Fn::GetAtt": [
                  "MongoDbServer",
                  "PrivateIp"
                ]
              }
            ]
          }
        ]
      }
    },
    "WaitHandleServer": {
      "Type": "AWS::CloudFormation::WaitConditionHandle",
      "Properties": {},
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "a8fb61c1-b182-469d-9ab8-1db2e4f79684"
        }
      }
    },
    "WaitConditionServer": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": [
        "MongoDbServer"
      ],
      "Properties": {
        "Handle": {
          "Ref": "WaitHandleServer"
        },
        "Timeout": "900"
      },
      "Metadata": {
        "AWS::CloudFormation::Designer": {
          "id": "6ac351b6-d2f4-4ff8-ab1e-c6008d1b5605"
        }
      }
    }
  },
  "Metadata": {
    "AWS::CloudFormation::Designer": {
      "a8fb61c1-b182-469d-9ab8-1db2e4f79684": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 90
        },
        "z": 1,
        "embeds": []
      },
      "f422349f-8416-4a3b-b47e-e45f1e8f42ed": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 200,
          "y": 100
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "9d8d80bb-cf44-498e-b420-43f6d0eece13"
        ]
      },
      "6ac351b6-d2f4-4ff8-ab1e-c6008d1b5605": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 60,
          "y": 210
        },
        "z": 1,
        "embeds": [],
        "isassociatedwith": [
          "a8fb61c1-b182-469d-9ab8-1db2e4f79684"
        ],
        "dependson": [
          "f422349f-8416-4a3b-b47e-e45f1e8f42ed",
          "9cf89591-36b4-4fa1-9807-22b1b65bc791"
        ]
      },
      "9d8d80bb-cf44-498e-b420-43f6d0eece13": {
        "size": {
          "width": 60,
          "height": 60
        },
        "position": {
          "x": 180,
          "y": 210
        },
        "z": 1,
        "embeds": []
      }
    }
  }
}